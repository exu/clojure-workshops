; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj::example-1.core=>

; Jack-in done.
clj::example-1.core=>
#'user/caesar-cipher
clj::user=>
#'user/caesar-cipher
clj::user=>
"Evqb kbtjb"
clj::user=>
"Evqb kbtjb"
clj::user=>
; Execution error (ArityException) at user/eval16178 (form-init10795770953553035146.clj:12).
; Wrong number of args (1) passed to: user/caesar-cipher
user/eval16178 (form-init10795770953553035146.clj:12)
clojure.lang.Compiler/eval (Compiler.java:7177)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=>
"utcmc hcmc"
clj::user=>
"vudnd idnd"
clj::user=>
(1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 4 1 2 ...)
clj::user=>
(0 1 2 0 1 2 0 1 2 0)
clj::user=>
#'user/positive-numbers
clj::user=>
(1 2 3 4 5 6 7 8 9 10)
clj::user=>
(1 2 3 4 5 6 7 8 9 10)
clj::user=>
(1 2 3 4 5 6 7 8 9 10)
clj::user=>
(1 2 3 4 5 6 7 8 9 10)
clj::user=>
(1 2 3 4 5 6 7 8 9 10)
clj::user=>
(1 2 3 4 5 6 7 8 9 10)
clj::user=>
(1 2 3 4 5 6 7 8 9 10)
clj::user=>
#'user/fib
clj::user=>
(1 1 2 3 5)
clj::user=>
java.util.Map
clj::user=>
#'user/date?
clj::user=>
false
clj::user=>
"FRED"
clj::user=>
{"a" 1, "b" 2}
clj::user=>
"FRED"
clj::user=>
; Execution error (ClassCastException) at user/eval16822 (form-init10795770953553035146.clj:18).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
user/eval16822 (form-init10795770953553035146.clj:18)
clojure.lang.Compiler/eval (Compiler.java:7177)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=>
; Execution error (IllegalArgumentException) at user/eval16884 (form-init10795770953553035146.clj:18).
; No matching field found: append for class java.lang.String
clojure.lang.Reflector/getInstanceField (Reflector.java:397)
clojure.lang.Reflector/invokeNoArgInstanceMember (Reflector.java:440)
user/eval16884 (form-init10795770953553035146.clj:18)
clojure.lang.Compiler/eval (Compiler.java:7177)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=>
; Syntax error compiling at (src/basics/java.clj:1:8190).
; Unable to resolve symbol: .substring in this context
clojure.lang.Compiler/analyze (Compiler.java:6808)
clojure.lang.Compiler/eval (Compiler.java:7181)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=>
; Execution error (IllegalArgumentException) at user/eval17006 (form-init10795770953553035146.clj:18).
; No matching field found: substring for class java.lang.String
clojure.lang.Reflector/getInstanceField (Reflector.java:397)
clojure.lang.Reflector/invokeNoArgInstanceMember (Reflector.java:440)
user/eval17006 (form-init10795770953553035146.clj:18)
clojure.lang.Compiler/eval (Compiler.java:7177)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=>
; Execution error (ClassCastException) at user/eval17145 (form-init10795770953553035146.clj:18).
; class java.lang.Long cannot be cast to class clojure.lang.IFn (java.lang.Long is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
user/eval17145 (form-init10795770953553035146.clj:18)
clojure.lang.Compiler/eval (Compiler.java:7177)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=>
; Syntax error compiling at (src/basics/java.clj:18:1).
; Unable to resolve symbol: .toBigInteger in this context
clojure.lang.Compiler/analyze (Compiler.java:6808)
clojure.lang.Compiler$InvokeExpr/parse (Compiler.java:3888)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7109)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler$BodyExpr$Parser/parse (Compiler.java:6120)
clojure.lang.Compiler$FnMethod/parse (Compiler.java:5467)
clojure.lang.Compiler$FnExpr/parse (Compiler.java:4029)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7105)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler/eval (Compiler.java:7174)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=>
3.141592653589793
clj::user=>
{"a" 1, "b" 2}
clj::user=>
"11.0.5+10"
clj::user=>
1
{:a 1, :b 2}
nil
clj::user=>
nil
clj::user=>

FAIL in () (form-init10795770953553035146.clj:7)
Arithmetic with positive integers
expected: (= 7 (+ 4 4))
  actual: (not (= 7 8))

FAIL in () (form-init10795770953553035146.clj:14)
Arithmetic with negative integers
expected: (= -4 (+ 1 -2))
  actual: (not (= -4 -1))
true
clj::user=> 

FAIL in () (form-init10795770953553035146.clj:7)
with positive integers
expected: (= 7 (+ 4 4))
  actual: (not (= 7 8))
false
clj::user=> 

FAIL in () (form-init10795770953553035146.clj:7)
with positive integers
expected: (= 7 (+ 4 4))
  actual: (not (= 7 8))
false
clj::user=> 

FAIL in () (form-init10795770953553035146.clj:7)
Arithmetic with positive integers
expected: (= 7 (+ 4 4))
  actual: (not (= 7 8))

FAIL in () (form-init10795770953553035146.clj:14)
Arithmetic with negative integers
expected: (= -4 (+ 1 -2))
  actual: (not (= -4 -1))
true
clj::user=> 

FAIL in () (form-init10795770953553035146.clj:7)
Arithmetic with positive integers
expected: (= 7 (+ 4 4))
  actual: (not (= 7 8))

FAIL in () (form-init10795770953553035146.clj:14)
Arithmetic with negative integers
expected: (= -4 (+ 1 -2))
  actual: (not (= -4 -1))
true
clj::user=> 
nil
; WARNING: replace already refers to: #'clojure.core/replace in namespace: user, being replaced by: #'clojure.string/replace
clj::user=> 
"jasia"
clj::user=> 
["dupa jasia na mamasia" "jasia"]
clj::user=> 
"jasia"
clj::user=> 
#'user/r
clj::user=> 
["success" "ucces" "s"]
clj::user=> 
["success" "ucces" "s"]
clj::user=> 
nil
clj::user=> 
nil
clj::user=> 
"mobbobbobbi"
clj::user=> 
["hel" "rld"]
clj::user=> 
Success!
"abra cadabra"
clj::user=> 
(1 2 3 4)
clj::user=> 
(246 492 738 984 1230)
clj::user=> 
((0) (1 1 1 1 1) (2) (3) (4) (5) (6))
clj::user=> 
{true [0 2 4 6], false [1 1 1 1 1 3 5]}
clj::user=> 
(false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 false
 true
 ...)
clj::user=> 
{true [1 1 1 3 3], false [2 2]}
clj::user=> 
{0 [0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99],
 1 [1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88 91 94 97],
 2 [2 5 8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62 65 68 71 74 77 80 83 86 89 92 95 98]}
clj::user=> 
("FizzBuzz"
 1
 2
 "Fizz"
 4
 "Buzz"
 "Fizz"
 7
 8
 "Fizz"
 "Buzz"
 11
 "Fizz"
 13
 14
 "FizzBuzz"
 16
 17
 "Fizz"
 19
 "Buzz"
 "Fizz"
 22
 23
 "Fizz"
 "Buzz"
 26
 "Fizz"
 28
 29
 "FizzBuzz"
 31
 32
 "Fizz"
 34
 "Buzz"
 "Fizz"
 37
 38
 "Fizz"
 "Buzz"
 41
 "Fizz"
 43
 44
 "FizzBuzz"
 46
 47
 "Fizz"
 49
 ...)
clj::user=> 
("FizzBuzz"
 1
 2
 "Fizz"
 4
 "Buzz"
 "Fizz"
 7
 8
 "Fizz"
 "Buzz"
 11
 "Fizz"
 13
 14
 "FizzBuzz"
 16
 17
 "Fizz"
 19
 "Buzz"
 "Fizz"
 22
 23
 "Fizz"
 "Buzz"
 26
 "Fizz"
 28
 29
 "FizzBuzz"
 31
 32
 "Fizz"
 34
 "Buzz"
 "Fizz"
 37
 38
 "Fizz"
 "Buzz"
 41
 "Fizz"
 43
 44
 "FizzBuzz"
 46
 47
 "Fizz"
 49
 ...)
clj::user=> 
("FizzBuzz"
 1
 2
 "Fizz"
 4
 "Buzz"
 "Fizz"
 7
 8
 "Fizz"
 "Buzz"
 11
 "Fizz"
 13
 14
 "FizzBuzz"
 16
 17
 "Fizz"
 19
 "Buzz"
 "Fizz"
 22
 23
 "Fizz"
 "Buzz"
 26
 "Fizz"
 28
 29
 "FizzBuzz"
 31
 32
 "Fizz"
 34
 "Buzz"
 "Fizz"
 37
 38
 "Fizz"
 "Buzz"
 41
 "Fizz"
 43
 44
 "FizzBuzz"
 46
 47
 "Fizz"
 49
 ...)
clj::user=> 
#'user/multiplayer-game-state
clj::user=> 
{:joe {:class "Ranger", :weapon "Longbow", :score 100},
 :jane {:class "Knight", :weapon "Greatsword", :score 140},
 :ryan {:class "Wizard", :weapon "Mystic Staff", :score 150}}
clj::user=> 
; Syntax error compiling at (src/dereference/main.clj:14:3).
; Unable to resolve symbol: weapon in this context
clojure.lang.Compiler/analyze (Compiler.java:6808)
clojure.lang.Compiler$InvokeExpr/parse (Compiler.java:3888)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7109)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler$BodyExpr$Parser/parse (Compiler.java:6120)
clojure.lang.Compiler$FnMethod/parse (Compiler.java:5467)
clojure.lang.Compiler$FnExpr/parse (Compiler.java:4029)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7105)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler/eval (Compiler.java:7174)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=> 
Joe is a Ranger wielding a Longbow
nil
clj::user=> 

FAIL in () (form-init10795770953553035146.clj:7)
Arithmetic with positive integers
expected: (= 7 (+ 4 4))
  actual: (not (= 7 8))

FAIL in () (form-init10795770953553035146.clj:14)
Arithmetic with negative integers
expected: (= -4 (+ 1 -2))
  actual: (not (= -4 -1))
true
clj::user=> 
4
3
2
1
nil
clj::user=> 
4
3
2
1
nil
clj::user=> 
4
3
2
1
nil
clj::user=> 
true
clj::user=> 
; Syntax error compiling at (src/loops/recur.clj:34:1).
; No such namespace: s
clojure.lang.Compiler/analyze (Compiler.java:6808)
clojure.lang.Compiler$InvokeExpr/parse (Compiler.java:3820)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7109)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler$BodyExpr$Parser/parse (Compiler.java:6120)
clojure.lang.Compiler$FnMethod/parse (Compiler.java:5467)
clojure.lang.Compiler$FnExpr/parse (Compiler.java:4029)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7105)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler/eval (Compiler.java:7174)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=> 
nil
clj::user=> 
true
clj::user=> 
-35
clj::user=> 
; Syntax error compiling at (src/repl/01-basic.clj:7:1).
; Unable to resolve symbol: doc in this context
clojure.lang.Compiler/analyze (Compiler.java:6808)
clojure.lang.Compiler$InvokeExpr/parse (Compiler.java:3820)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7109)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler$BodyExpr$Parser/parse (Compiler.java:6120)
clojure.lang.Compiler$FnMethod/parse (Compiler.java:5467)
clojure.lang.Compiler$FnExpr/parse (Compiler.java:4029)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7105)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler/eval (Compiler.java:7174)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=> 
nil
clj::user=> 
-------------------------
clojure.string/upper-case
([s])
  Converts string to all upper-case.
nil
clj::user=> 
(cider.nrepl.inlined-deps.orchard.v0v5v5.orchard.inspect/render-indexed-values
 cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.reader-types/indexing-push-back-reader
 cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.reader-types/indexing-reader?
 clj-kondo.impl.core/index-defs-and-calls
 clj-kondo.impl.core/namespaces->indexed
 clj-kondo.impl.core/namespaces->indexed-cljc
 clj-kondo.impl.core/namespaces->indexed-defs
 clj-kondo.impl.toolsreader.v1v2v2.clojure.tools.reader.reader-types/indexing-push-back-reader
 clj-kondo.impl.toolsreader.v1v2v2.clojure.tools.reader.reader-types/indexing-reader?
 clojure.core/indexed?
 clojure.core/keep-indexed
 clojure.core/map-indexed
 clojure.set/index
 clojure.string/index-of
 clojure.string/last-index-of)
clj::user=> 
-------------------------
cider.nrepl.inlined-deps.orchard.v0v5v5.orchard.java/class-info
([class])
  For the class symbol, return (possibly cached) Java class and member info.
  Members are indexed first by name, and then by argument types to list all
  overloads.
-------------------------
cider.nrepl.inlined-deps.orchard.v0v5v5.orchard.java/class-info*
([class])
  For the class symbol, return Java class and member info. Members are indexed
  first by name, and then by argument types to list all overloads.
-------------------------
cider.nrepl.inlined-deps.orchard.v0v5v5.orchard.inspect/down
([inspector idx])
  Drill down to an indexed object referred to by the previously
   rendered value.
-------------------------
cider.nrepl.inlined-deps.orchard.v0v5v5.orchard.inspect/render-collection-paged
([inspector obj])
  Render a single page of either an indexed or associative collection.
-------------------------
clj-kondo.impl.analyzer/analyze-expressions
([{:keys [:base-lang :lang :config], :as ctx} expressions])
  Analyzes expressions and collects defs and calls into a map. To
  optimize cache lookups later on, calls are indexed by the namespace
  they call to, not the ns where the call occurred.
-------------------------
clojure.core/contains?
([coll key])
  Returns true if key is present in the given collection, otherwise
  returns false.  Note that for numerically indexed collections like
  vectors and Java arrays, this tests if the numeric key is within the
  range of indexes. 'contains?' operates constant or logarithmic time;
  it will not perform a linear search for a value.  See also 'some'.
-------------------------
clojure.core/indexed?
([coll])
  Return true if coll implements Indexed, indicating efficient lookup by index
-------------------------
clojure.core/keep-indexed
([f] [f coll])
  Returns a lazy sequence of the non-nil results of (f index item). Note,
  this means false return values will be included.  f must be free of
  side-effects.  Returns a stateful transducer when no collection is
  provided.
-------------------------
clojure.core/map-indexed
([f] [f coll])
  Returns a lazy sequence consisting of the result of applying f to 0
  and the first item of coll, followed by applying f to 1 and the second
  item in coll, etc, until coll is exhausted. Thus function f should
  accept 2 arguments, index and item. Returns a stateful transducer when
  no collection is provided.
-------------------------
cider.nrepl.middleware.util.instrument/walk-indexed
([f form] [coor f form])
  Walk through form calling (f coor element).
  The value of coor is a vector of indices representing element's
  address in the form. Unlike `clojure.walk/walk`, all metadata of
  objects in the form is preserved.
nil
clj::user=> 
"(map inc)"
nil
clj::user=> 

| :a | :b |
|----+----|
|  1 |  2 |
|  2 |  4 |
nil
clj::user=> 
#function[clojure.pprint/pprint]
clj::user=> 
{:a {:b {:c {:a {:b {:c :d}}}, :d {:a {:b {:c :d}}}}}}
nil
clj::user=> 
"dupa"
clj::user=> 
; Syntax error compiling at (src/strings/strings.clj:29:1).
; Unable to resolve symbol: cl-format in this context
clojure.lang.Compiler/analyze (Compiler.java:6808)
clojure.lang.Compiler$InvokeExpr/parse (Compiler.java:3820)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7109)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler$BodyExpr$Parser/parse (Compiler.java:6120)
clojure.lang.Compiler$FnMethod/parse (Compiler.java:5467)
clojure.lang.Compiler$FnExpr/parse (Compiler.java:4029)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7105)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler/eval (Compiler.java:7174)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=> 
nil
clj::user=> 
"one hundred fifty-eight"
clj::user=> 
"first and second"
clj::user=> 
; Syntax error compiling at (src/strings/strings.clj:38:1).
; Unable to resolve symbol: fmt in this context
clojure.lang.Compiler/analyze (Compiler.java:6808)
clojure.lang.Compiler$InvokeExpr/parse (Compiler.java:3888)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7109)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler$BodyExpr$Parser/parse (Compiler.java:6120)
clojure.lang.Compiler$FnMethod/parse (Compiler.java:5467)
clojure.lang.Compiler$FnExpr/parse (Compiler.java:4029)
clojure.lang.Compiler/analyzeSeq (Compiler.java:7105)
clojure.lang.Compiler/analyze (Compiler.java:6789)
clojure.lang.Compiler/eval (Compiler.java:7174)
clojure.core/eval (core.clj:3214)
clojure.core/eval (core.clj:3210)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:665)
clojure.core/with-bindings* (core.clj:1973)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:202)
nrepl.middleware.session/session-exec (session.clj:201)
java.lang.Thread/run (Thread.java:834)
clj::user=> 
#'user/fmt
clj::user=> 
